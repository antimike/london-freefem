verbosity = 0;

real lambda = .05;		// lambda in microns
real Phi0 = 20.7;		// Flux quantum in G*um^2

ofstream op("data.txt");

// Solution of Fig. 2 geometry from Cordier's paper.

// In Cordier, one starts by solving Eqs. 16--18 to find Psi; then grad Phi = Bq.
// In a cylindrical geometry this is particularly simple. The surface Sa spans the hole, and the gradient of Phi is equal to BQS on Sa. By symmetry, this means that
// Phi = BQS*z, and BQ = grad Phi = BQS*z_hat. Finally, we can take BQS = Phi0/pi*r1^2, where r1 is the hole radius. Thus we don't need to find the field BQ by solving, e.g.,
//	Eq. 30. We already know its value analytically.

// There are some other simplifications due to the cylindrical geometry. First, because the tube is infinite in z, we expect the variables A* and theta to be independent of z (y in FreeFem)
//	(or, like Phi, to at most have a linear z-dependence). We'll need to check this out and see if it works. Thus A* and theta depend only on rho (x in FreeFem).

// Finally, we need to solve for A* and theta simultaneously in both the hole and the SC. In the SC we solve Eqs. 31 and 32, and in the SC we solve Eq. 33.

//	For solving for the vortex, we don't need to be concerned with the region outside the tube. Here, B = 0.

//------------------------------------------------- These are the various borders used in the simulation -----------------------------------
int TOP = 100, RIGHT = 101, LEFT = 102, BOTTOM = 103, ROD = 104;

real W = 10.0;
real H = 20.0;
real R = 1.0;

	border top(t = W, 0){x = t; y = H/2; label = TOP;};
	border right(t = -H/2, H/2){x = W; y = t; label = RIGHT;};
	border left(t = H/2, -H/2){x = 0; y = t; label = LEFT;};
	border bottom(t = 0, W){x = t; y = -H/2; label = BOTTOM;};
	
	border rod(t = 0, 2*pi){x = R*cos(t) + W/2; y = R*sin(t); label = ROD;};
	
	
//------------------------------------------------------------------------------------------------------------------------------------------------

mesh Th, Sh;

fespace FE(Th,P1);
FE Ap, Wp, A2;

////-------------------------------- Boundary that includes hole and SC, but not outside SC -----------------------------------

Th = buildmesh(top(50) + right(50) + bottom(50) + left(50) + rod(50));

//plot(Th, wait = true);

// This code finds the integers associated with each of the regions. See FreeFem manual p. 360 (Sec. 4.2.23 region). Also p. 47, center.
// Now we can write our equations to be different inside and out using something like u*dx*(region == SC) (I hope!).

int outside = Th((W/2 + R)/2, 0).region;
int SC = Th(W/2, 0).region;

//------------------------------------------------------------------------------------------------------------------------------------------------

//BQ = Phi0/(2*pi*r1^2); 	// Field BQ has this magnitude and points in the y direction.

problem Cordier(Ap, Wp) =

	int2d(Th)(2*pi*x*(     dy(Wp)*dy(Ap) + (Wp + x*dx(Wp))*(Ap + x*dx(Ap))/x^2 + (region == SC)*(Ap*Wp/lambda^2))     )
	
	 + int1d(Th, RIGHT)(Wp*1);// + on(TOP, Ap = x) + on(BOTTOM, Ap = x);
	
	Cordier;
	
	// This step refines the mesh according to a field that is Ap^2. hmax is the maximum size of a mesh element.
	
	A2 = Ap*Ap;
	Th = adaptmesh(Th, A2, hmax = R/20);
	plot(Th, wait = true);
	
	Cordier;	// Run again with finer mesh.
	
	plot(Ap, fill = false, nbiso = 100, value = true);

	int i;
	real r;

	//for (r = r1; r <= r2; r += (r2 - r1)/200)
	//	cout << r << "\t" << Ap(r, h/2) << endl;
