load "msh3"
load "tetgen"
load "medit"
load "iovtk"
load "ffrandom"
include "MeshSurface.idp"	// Part of the standard FreeFEM++ installation
include "../constants.idp"
include "../macros/vector-analysis.idp"
include "../matlab/release-v2.0/demos/ffmatlib.idp"
include "../test/plot-boundary-labels.idp"

mesh3 AllSpace = readmesh3("../meshes/slab_in_cube.mesh");
mesh3 BowlingPin = readmesh3("../meshes/bowling-pin.mesh");

meshS OuterBdy = AllSpace.Gamma;
//mesh CrossSection = readmesh("../meshes/slab-in-cube-cross-section.mesh");
//plotBdyLabels3d(AllSpace);

// FE SPACES
fespace Vector2(AllSpace, [P2, P2, P2]);
fespace DivVector0(AllSpace, RT03d); 
fespace CurlVector0(AllSpace, Edge03d); 
fespace BPCurlVector0(BowlingPin, Edge03d); 
fespace BPScalar(BowlingPin, P1); 

BPScalar Boopy = x^2 + y^2 - z^2;
BPCurlVector0 [Hbpx, Hbpy, Hbpz] = [-y, x, 0];
BPCurlVector0 Hbp[] = [-y, x, 0];

//medit("Applied field on bowling pin mesh", BowlingPin, Hbpz);
//medit("Vector field on bowling pin", BowlingPin, [Hbpx, Hbpy, Hbpz]);
//plot([Hbpx, Hbpy, Hbpz], wait=true);
//medit("Boopy", BowlingPin, Boopy);
medit("Hbp", BowlingPin, Hbp);

Vector2 [Ax, Ay, Az], [Wx, Wy, Wz];
Vector2 [HXx, HXy, HXz] = [0, 0, H0];
CurlVector0 [Acx, Acy, Acz], [Wcx, Wcy, Wcz];
DivVector0 [Adx, Ady, Adz], [Wdx, Wdy, Wdz];

// PROBLEM: CLASSICAL (CONTINUOUS) ELEMENTS
// This consistently crashes for me, even without attempting to plot
problem emptySpaceContinuous([Ax, Ay, Az], [Wx, Wy, Wz]) = 
	int3d(AllSpace)(
		Curl3d(W)'*Curl3d(A) 
		+ 100*penaltyConstant*Div3d(W)*Div3d(A)
	)
	+ int2d(AllSpace, LEFT)(
			//[Wx, Wy, Wz]'*parallelBdyComponents(HX)
			//Wz
			Wy
	)
	+ int2d(AllSpace, RIGHT)(
			-Wy
	)
	+ int2d(AllSpace, FRONT)(
			-Wx
	)
	+ int2d(AllSpace, BACK)(
			Wx
	)
	+ on(TOP, BOTTOM, Az=0)
	+ on(LEFT, RIGHT, Ax=0)
	+ on(FRONT, BACK, Ay=0);

// PROBLEM: CURL-CONFORMING (NEDELEC) ELEMENTS
// This at least runs without crashing, but the results differ depending on how the boundary conditions are set
// UPDATE: Most of the discrepancy has been resolved, but a ~10% difference in the min/max values returned by UMFPACK remains
problem emptySpaceNedelec([Acx, Acy, Acz], [Wcx, Wcy, Wcz]) = 
	int3d(AllSpace)(
		Curl3d(Wc)'*Curl3d(Ac) 
		//+ 100*penaltyConstant*Div3d(Wc)*Div3d(Ac)
	)
	//+ int2d(AllSpace, LEFT, RIGHT, TOP, BOTTOM, FRONT, BACK)(
			//[Wcx, Wcy, Wcz]'*parallelBdyComponents(HX)
	//);
	+ int2d(AllSpace, LEFT)(
			//[Wcx, Wcy, Wcz]'*parallelBdyComponents(HX)
			//Wcz
			Wcy*H0
	)
	+ int2d(AllSpace, RIGHT)(
			-Wcy*H0
	)
	+ int2d(AllSpace, FRONT)(
			-Wcx*H0
	)
	+ int2d(AllSpace, BACK)(
			Wcx*H0
	);

// PROBLEM: EMPTY SPACE WITH DIV CONFORMING (RAVIART-THOMAS) ELEMENTS
// This doesn't crash but the solver gives NaN as both min and max
problem emptySpaceRaviartThomas([Adx, Ady, Adz], [Wdx, Wdy, Wdz]) = 
	int3d(AllSpace)(
		Curl3d(Wd)'*Curl3d(Ad) 
		+ 100*penaltyConstant*Div3d(Wd)*Div3d(Ad)
	)
	+ int2d(AllSpace, LEFT)(
			Wdy
	)
	+ int2d(AllSpace, LEFT)(
			Wdy
	)
	+ int2d(AllSpace, RIGHT)(
			-Wdy
	)
	+ int2d(AllSpace, FRONT)(
			-Wdx
	)
	+ int2d(AllSpace, BACK)(
			Wdx
	);
	//+ int2d(AllSpace, LEFT, RIGHT, TOP, BOTTOM, FRONT, BACK)(
			//[Wdx, Wdy, Wdz]'*parallelBdyComponents(HX)
	//);

//emptySpaceContinuous;
emptySpaceNedelec;
//emptySpaceRaviartThomas;

CurlVector0 [Bcx, Bcy, Bcz] = Curl3d(Ac);
// Saving the mesh again is redundant for now, but will become important once mesh refinement is implemented
savemesh(AllSpace, "empty-space-mesh.mesh");
// TODO: Determine whether Nedelec elements determine the solution at the center of gravity or the vertices (presumably vertices)
savesol("empty-space.sol", AllSpace, [Acx, Acy, Acz], [Bcx, Bcy, Bcz]);
savesol("empty-space-applied-field.sol", AllSpace, [HXx, HXy, HXz]);
ffSaveData3(Acx, Acy, Acz, "empty-space-vector-potential.txt");
ffSaveData3(Bcx, Bcy, Bcz, "empty-space-magnetic-field.txt");
ffSaveVh(AllSpace, CurlVector0, "empty-space-nedelec-fespace.txt");

// OUTPUT RESULTS
//fespace VectorProj(CrossSection, [P1, P1]); 
//VectorProj [BxMid, BzMid] = [Bx, 0, Bz];
//plot([BxMid, BzMid], wait=true);
//plot([Bx, By, Bz], wait=true);
//medit("Magnetic field", AllSpace, [Bx, By, Bz]);
//medit("Magnetic field", AllSpace, Bz);
//plot([HXx, HXy, HXz], wait=true);
//medit("Applied field", AllSpace, HXz, order=1);
//plot(HXz, wait=1);
