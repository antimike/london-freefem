load "msh3"
load "tetgen"
load "medit"
load "iovtk"
load "ffrandom"
include "MeshSurface.idp"	// Part of the standard FreeFEM++ installation
include "../constants.idp"
include "../macros/vector-analysis.idp"
include "../matlab/release-v2.0/demos/ffmatlib.idp"

mesh3 TvTotal = readmesh(TvTotal, "../meshes/slab_in_cube.mesh");
meshS TvBdy = readmesh("../meshes/slab_in_cube_boundary.mesh");

// FE SPACES

fespace Sv0(TvTotal, P0);
fespace Sv1(TvTotal, P1);
fespace Vv2(TvTotal, [P2, P2, P2]);

// NOTE: Naming conventions on vector components (i.e., vector `Foo` has components `[Foox, Fooy, Fooz]`) are necessary for vector macros (Grad, Div, Curl, etc.) to work
// B is guaranteed to have a continuous normal component, so we need to use Raviart-Thomas elements (I think)
Sv0 inSC = region == SC;             	// Characteristic function of the SC
Sv1 Theta;                           	// Scalar phase from Cordier 1 (rescaled; cf. eq. (60))
Vv2 [Ax, Ay, Az];        	// Vector potential
Vv2 [Wx, Wy, Wz];                    	// Vector basis functions
Sv1 w;                               	// Scalar basis functions
Vv2 [Bx, By, Bz] = Curl3d(A);        	// Magnetic field
Vv2 [Hxx, Hxy, Hxz] = [0, 0, 1];     	// External (applied) magnetic field
Vv2 [Jx, Jy, Jz] = inSC * Curl3d(B); 	// Current density (only defined in SC)

// PROBLEM DEFINITION

problem meissner([Ax, Ay, Az, Theta], [Wx, Wy, Wz, w], solver=CG) = 
	int3d(TvTotal)(
		Curl3d(W)'*Curl3d(A) - Div3d(W)*Div3d(A)
		+ penaltyConstant*Div3d(W)*Div3d(A)
		+ inSC*inverseLambda^2*[Wx, Wy, Wz]'*[Ax, Ay, Az]
		- inSC*inverseLambda*[Wx, Wy, Wz]'*Grad3d(Theta)
	)
	+ int3d(TvTotal)(
			-1*inSC*inverseLambda*Grad3d(w)'*[Ax, Ay, Az]
			+ inSC*Grad3d(w)'*Grad3d(Theta)
	)
	+ int2d(TsTotal, EXTERNAL)(
			[Wx, Wy, Wz]'*parallelBdyComponents(Hx)
	)
	+ on(TOP, BOTTOM, Az = 0)
	+ on(LEFT, RIGHT, Ax = 0)
	+ on(FRONT, BACK, Ay = 0);

fespace VvNedelec(TvTotal, Edge03d); 
fespace VvNedelecPlus(TvTotal, [Edge03d, P1]); 

//Sv0 inSC = region == SC;             	// Characteristic function of the SC
VvNedelecPlus [ANx, ANy, ANz, ThetaN];        	// Vector potential
VvNedelecPlus [WNx, WNy, WNz, wN];                    	// Vector basis functions
VvNedelec [BNx, BNy, BNz] = Curl3d(AN);        	// Magnetic field
//VvNedelec [HNxx, HNxy, HNxz] = [0, 0, 1];     	// External (applied) magnetic field
VvNedelec [JNx, JNy, JNz] = inSC * Curl3d(BN); 	// Current density (only defined in SC)
Sv0 HNxx = 0, HNxy = 0, HNxz = 1;

//problem MeissnerNedelec([ANx, ANy, ANz, ThetaN], [WNx, WNy, WNz, wN], solver=CG) =
//varf M([ANx, ANy, ANz, ThetaN], [WNx, WNy, WNz, wN]) = 
	//int3d(TvTotal)(
		//Curl3d(WN)'*Curl3d(AN) - Div3d(WN)*Div3d(AN)
		//+ penaltyConstant*Div3d(WN)*Div3d(AN)
		//+ inSC*inverseLambda^2*[WNx, WNy, WNz]'*[ANx, ANy, ANz]
		//- inSC*inverseLambda*[WNx, WNy, WNz]'*Grad3d(ThetaN)
	//)
	//+ int3d(TvTotal)(
			//-1*inSC*inverseLambda*Grad3d(wN)'*[ANx, ANy, ANz]
			//+ inSC*Grad3d(wN)'*Grad3d(ThetaN)
	//);

//varf A([ANx, ANy, ANz, ThetaN], [WNx, WNy, WNz, wN]) = 
	//int2d(TsTotal, EXTERNAL)(
			//[WNx, WNy, WNz]'*parallelBdyComponents(Hx)
	//);

//matrix MM = M(VvNedelecPlus, VvNedelecPlus);
//Sv1 AA; AA[] = A(0, VvNedelecPlus);

//set(MM, solver=CG);
//[ANx[], ANy[], ANz[], ThetaN[]] = MM^-1*AA[];


	
//meissner;
//medit("Solution", TvTotal, [Bx, By, Bz]);

//mesh CrossSection = square(nx, ny, 
	//SquareParameterization(
		//-boxLength/2, boxLength/2, 
		//-boxLength, boxLength/2
	//)
//);
//fespace SsCrossSect (CrossSection, P2); 
//SsCrossSect BxMid, ByMid;
//BxMid = Bx(x, y, 0);
//ByMid = By(x, y, 0);
//plot([BxMid, ByMid], wait=true);

