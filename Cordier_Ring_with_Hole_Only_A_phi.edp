verbosity = 0;

real lambda = 0.2;		// lambda in microns
real Phi0 = 20.7;		// Flux quantum in G*um^2

ofstream op("data.txt");

// Solution of Fig. 2 geometry from Cordier's paper.

// In Cordier, one starts by solving Eqs. 16--18 to find Psi; then grad Phi = Bq.
// In a cylindrical geometry this is particularly simple. The surface Sa spans the hole, and the gradient of Phi is equal to BQS on Sa. By symmetry, this means that
// Phi = BQS*z, and BQ = grad Phi = BQS*z_hat. Finally, we can take BQS = Phi0/pi*r1^2, where r1 is the hole radius. Thus we don't need to find the field BQ by solving, e.g.,
//	Eq. 30. We already know its value analytically.

// There are some other simplifications due to the cylindrical geometry. First, because the tube is infinite in z, we expect the variables A* and theta to be independent of z (y in FreeFem)
//	(or, like Phi, to at most have a linear z-dependence). We'll need to check this out and see if it works. Thus A* and theta depend only on rho (x in FreeFem).

// Finally, we need to solve for A* and theta simultaneously in both the hole and the SC. In the SC we solve Eqs. 31 and 32, and in the SC we solve Eq. 33.

//	For solving for the vortex, we don't need to be concerned with the region outside the tube. Here, B = 0.

//------------------------------------------------- These are the various borders used in the simulation -----------------------------------
int Gtop = 100, Gright = 101, Gbot = 102, GTubeLeft = 103, GTubeRight = 104, Gleft = 105,  Gholebot = 106;

real r1 = 1.0;
real r2 = 2.0;
real R = 10.0;
real h = 2.0;

real BQ;

	// This is the border of the strip. It can be extended in or out by the "halo" amount

	border holetop(t = 0, r1){x = t; y = h; label = Gtop;};
	border SCtop(t = r1, r2){x = t; y = h; label = Gtop;};
	border outertop(t = r2, R){x = t; y = h; label = Gtop;};
	
	border outerright(t=h, 0){x = R; y = t; label = Gright;};
	
	border outerbottom(t = R, r2){x = t; y = 0; label = Gbot;};
	border SCbottom(t = r2, r1){x = t; y = 0; label = Gbot;};
	border holebottom(t = r1, 0){x = t; y = 0; label = Gholebot;};
	
	border tubeleft(t = h, 0){x = r1; y = t; label = GTubeLeft;};
	border tuberight(t = h, 0){x = r2; y = t; label = GTubeRight;};
	border innerleft(t = 0, h){x = 0; y = t; label = Gleft;};
	
	
//------------------------------------------------------------------------------------------------------------------------------------------------

mesh Th, Sh;

fespace FE(Th,P1); // P2 conforming triangular FEM
FE Ap, Wp, A2;

//-------------------------------- Boundary that includes hole and SC, but not outside SC -----------------------------------

Th = buildmesh(holetop(-20) + SCtop(-40) + SCbottom(-40) + holebottom(-20) + innerleft(-60) + tubeleft(-60) + tuberight(-60));

//Th = buildmesh(holetop(-10) + SCtop(-20) + outertop(-15) + outerright(-3) + outerbottom(-15) + SCbottom(-20) + holebottom(-10) + innerleft(-20) + tubeleft(-20) + tuberight(-20));
plot(Th, wait = true);

// This code finds the integers associated with each of the regions. See FreeFem manual p. 360 (Sec. 4.2.23 region). Also p. 47, center.
// Now we can write our equations to be different inside and out using something like u*dx*(region == SC) (I hope!).

int hole = Th(r1/2, h/2).region;
int SC = Th((r1 + r2)/2, h/2).region;
//int outside = Th((r2 + R)/2, h/2).region;

//------------------------------------------------------------------------------------------------------------------------------------------------

BQ = Phi0/(2*pi*r1^2); 	// Field BQ has this magnitude and points in the y direction.

problem Cordier(Ap, Wp) = 

	int2d(Th)(2*pi*x*(     dy(Wp)*dy(Ap) + (Wp + x*dx(Wp))*(Ap + x*dx(Ap))/x^2 +(region == SC)*(Ap*Wp/lambda^2))     )

	+ int2d(Th)(2*pi*(region == hole)*BQ*(Wp + x*dx(Wp)));			// Eq. 33 Term 3, applies in hole.
	
	// - int2d(Th)(    (region == SC) * Phi0*Wp/(2*pi*lambda^2*x)    );
	
	 + int1d(Th, GTubeRight)(2*pi*r2*Wp*1);

	Cordier;

	plot(Ap, fill = false, nbiso = 40, value = true, wait = true);
	
	int i;
	real r;
	
	real numpnts = 20;
	real[int] xx(numpnts), yy(numpnts);
	
	i = 0;
	for (r = r1; r <= r2; r += (r2 - r1)/20) {
		x = r;
		y = h/2;
		xx[i] = r;
		yy[i] = Ap;
		i += 1;
	}
	plot([xx, yy], wait=true);
	
	
	
	
	for (r = r1; r <= r2; r += (r2 - r1)/200)
		cout << r << "\t" << Ap(r, h/2) << endl;
	
	
