real r0Internal = 0;
real rho0Internal = 0;

func real setMinR(real r0) {
	r0Internal = r0;
}

func real setMinRho(real rho0) {
	rho0Internal = rho0;
}

func real safeDivide(real num, real num0){
	return abs(num) >= num0 ? 1/num : 1/num0;
}

// This isn't going to work---we need to define this function on arrays of FEspace functions, not elementary functions.  Macros seem like the better approach here.
//func real[int] Cross(real[int] A, real[int] B) {
	//assert(A.n == 3 && B.n == 3);

//}

// Convention-based macro approach suggested in FreeFEM manual
// For these macros to work, components of FEspace vector `Foo` must be named `[Foox, Fooy, Fooz]`
// TODO: Find a way to enforce the condition rho0Internal != 0 in the relevant macros
macro Dot3d(A, B) (A#x*B#x + A#y*B#y + A#z*B#z)//EOM 
macro Dot2d(A, B) (A#x*B#x + A#y*B#y)//EOM 
macro Cross3dM(A, B)  [A#y*B#z - B#z*A#y, A#z*B#x - A#x*B#z, A#x*B#y - A#y*B#x]//EOM 
macro Cross2d(A, B) [A#x*B#y - A#y - B#x]//EOM 
macro Div2d(A) (dx(A#x) + dy(A#y))//EOM 
macro Div3d(A) (dx(A#x) + dy(A#y) + dz(A#z))//EOM 
macro Grad2d(f) [dx(f), dy(f)]//EOM 
macro Grad3d(f) [dx(f), dy(f), dz(f)]//EOM 
macro Curl3d(A) [dy(A#z) - dz(A#y), dz(A#x) - dx(A#z), dx(A#y) - dy(A#x)]//EOM 
macro Curl2d(A) [dx(A#y) - dy(A#x)]//EOM 
macro parallelBdyComponents(A) [N.y*A#z - N.z*A#y, N.z*A#x - N.x*A#z, N.x*A#y - N.y*A#x]//EOM 


func r = sqrt(x^2 + y^2 + z^2);
func rho = sqrt(x^2 + y^2);
func phi = x == 0 ? (y >= 0 ? pi/2 : -pi/2) : atan(y/x);
func theta = z == 0 ? pi/2 : atan(rho/z);

// Two problems with this: 1. no obvious way to assert that r0Internal and rho0Internal != 0, and 2. the functions might need to be declared as discretized (i.e., FEspace) functions
macro rHat() [x*safeDivide(r, r0Internal), y*safeDivide(r, r0Internal), z*safeDivide(r, r0Internal)] //EOM 
macro rhoHat() [x*safeDivide(rho, rho0Internal), y*safeDivide(rho, rho0Internal), 0] //EOM 
macro phiHat() [-y*safeDivide(rho, rho0Internal), x*safeDivide(rho, rho0Internal), 0] //EOM 
macro thetaHat() [x*z*safeDivide(r*rho, r0Internal*rho0Internal), y*z*safeDivide(r*rho, r0Internal*rho0Internal), -rho*safeDivide(r, r0Internal)] //EOM 


// Coordinate systems and unit vectors
//func real rFromxyz(real a, real b, real c){
	//return sqrt(a^2 + b^2 + c^2);
//}
//func real rhoFromxyz(real a, real b, real c){ 
	//return sqrt(a^2 + b^2);
//}
// TODO: Investigate why this doesn't compile
//func real[int] thetaHat(real a, real b, real c, real r0){
	//return [a*c*safeDivide(rFromxyz(a, b, c), r0)*safeDivide(rhoFromxyz(a, b, c), r0), b*c*safeDivide(rFromxyz(a, b, c), r0)*safeDivide(rhoFromxyz(a, b, c), r0), -rhoFromxyz(a, b, c)*safeDivide(rFromxyz(a, b, c), r0)];
//}
//func real[int] phiHat(real a, real b, real c, real rho0){ 
	//return [-b*safeDivide(rhoFromxyz(a, b, c), rho0), a*safeDivide(rhoFromxyz(a, b, c), rho0), 0];
//}
//func real[int] rHat(real a, real b, real c, real r0){
	//return [a*safeDivide(rFromxyz(a, b, c), r0), b*safeDivide(rFromxyz(a, b, c), r0), c*safeDivide(rFromxyz(a, b, c), r0)];
//}

// Surface, volume, and line elements
func real dVspherical(real R, real Theta, real Phi){
	return R^2*sin(Theta);
}
func real dApolar(real R, real Theta){
	return R;
}
macro dn(f) (N.x*dx(f) + N.y*dy(f) + N.z*dz(f)) //EOM
macro dnCross(Fx, Fy, Fz) Cross(N.x, N.y, N.z, Fx, Fy, Fz) //EOM
macro fluxElement(Fx, Fy, Fz) [Fx, Fy, Fz]'*N //EOM
